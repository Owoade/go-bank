// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: account.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO "accounts" (
    user_id,
    balance
) VALUES (
    $1, $2
) RETURNING id, user_id, balance, created_at
`

type CreateAccountParams struct {
	UserID  pgtype.Int4
	Balance pgtype.Numeric
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.UserID, arg.Balance)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountById = `-- name: GetAccountById :one
SELECT id, user_id, balance, created_at FROM "accounts" WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccountById(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const getUserAccount = `-- name: GetUserAccount :one
SELECT id, user_id, balance, created_at FROM "accounts" WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserAccount(ctx context.Context, userID pgtype.Int4) (Account, error) {
	row := q.db.QueryRow(ctx, getUserAccount, userID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const updateBalance = `-- name: UpdateBalance :one
UPDATE "accounts" SET balance = balance + $1 WHERE user_id = $2 RETURNING id, user_id, balance, created_at
`

type UpdateBalanceParams struct {
	Balance pgtype.Numeric
	UserID  pgtype.Int4
}

func (q *Queries) UpdateBalance(ctx context.Context, arg UpdateBalanceParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateBalance, arg.Balance, arg.UserID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}
