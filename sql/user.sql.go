// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "users" (
    email,
    password
) VALUES (
    $1, $2
) RETURNING id, email, password, created_at
`

type CreateUserParams struct {
	Email    pgtype.Text
	Password pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getOneUserByEmail = `-- name: GetOneUserByEmail :one
SELECT  id, email, password, created_at FROM "users" WHERE email = $1 LIMIT 1
`

func (q *Queries) GetOneUserByEmail(ctx context.Context, email pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getOneUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getOneUserById = `-- name: GetOneUserById :one
SELECT  id, email, password, created_at FROM "users" WHERE  id = $1 LIMIT 1
`

func (q *Queries) GetOneUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getOneUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE "users" SET password = $1 WHERE email = $2
`

type UpdateUserPasswordParams struct {
	Password pgtype.Text
	Email    pgtype.Text
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.Password, arg.Email)
	return err
}
