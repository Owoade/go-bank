// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: account_transactions.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO "transactions" (
    account_id,
    amount,
    type
) VALUES (
    $1, $2, $3
) RETURNING id, account_id, amount, type, created_at
`

type CreateTransactionParams struct {
	AccountID pgtype.Int4
	Amount    pgtype.Int8
	Type      NullTransactionStatus
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction, arg.AccountID, arg.Amount, arg.Type)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountTransactions = `-- name: GetAccountTransactions :many
SELECT id, account_id, amount, type, created_at FROM "transactions" WHERE account_id = $1 LIMIT $2 OFFSET $3
`

type GetAccountTransactionsParams struct {
	AccountID pgtype.Int4
	Limit     int32
	Offset    int32
}

func (q *Queries) GetAccountTransactions(ctx context.Context, arg GetAccountTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getAccountTransactions, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.Type,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
