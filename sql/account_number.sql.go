// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: account_number.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccountNumber = `-- name: CreateAccountNumber :one
INSERT INTO "account_numbers" (
    account_id,
    account_name,
    account_number,
    bank_name
) VALUES (
    $1, $2, $3, $4
) RETURNING id, account_id, account_name, account_number, bank_name, created_at
`

type CreateAccountNumberParams struct {
	AccountID     pgtype.Int4
	AccountName   pgtype.Text
	AccountNumber pgtype.Int8
	BankName      pgtype.Text
}

func (q *Queries) CreateAccountNumber(ctx context.Context, arg CreateAccountNumberParams) (AccountNumber, error) {
	row := q.db.QueryRow(ctx, createAccountNumber,
		arg.AccountID,
		arg.AccountName,
		arg.AccountNumber,
		arg.BankName,
	)
	var i AccountNumber
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountName,
		&i.AccountNumber,
		&i.BankName,
		&i.CreatedAt,
	)
	return i, err
}

const getUserAccountNumbers = `-- name: GetUserAccountNumbers :many
SELECT id, account_id, account_name, account_number, bank_name, created_at FROM "account_numbers" WHERE account_id = $1 LIMIT 1
`

func (q *Queries) GetUserAccountNumbers(ctx context.Context, accountID pgtype.Int4) ([]AccountNumber, error) {
	rows, err := q.db.Query(ctx, getUserAccountNumbers, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountNumber
	for rows.Next() {
		var i AccountNumber
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.AccountName,
			&i.AccountNumber,
			&i.BankName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
