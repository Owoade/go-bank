// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package sql

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type TransactionStatus string

const (
	TransactionStatusCredit TransactionStatus = "credit"
	TransactionStatusDebit  TransactionStatus = "debit"
)

func (e *TransactionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionStatus(s)
	case string:
		*e = TransactionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionStatus: %T", src)
	}
	return nil
}

type NullTransactionStatus struct {
	TransactionStatus TransactionStatus
	Valid             bool // Valid is true if TransactionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionStatus), nil
}

type Account struct {
	ID        int64
	UserID    pgtype.Int4
	Balance   pgtype.Numeric
	CreatedAt pgtype.Timestamptz
}

type AccountNumber struct {
	ID            int64
	AccountID     pgtype.Int4
	AccountName   pgtype.Text
	AccountNumber pgtype.Int8
	BankName      pgtype.Text
	CreatedAt     pgtype.Timestamptz
}

type Transaction struct {
	ID        int64
	AccountID pgtype.Int4
	Amount    pgtype.Numeric
	Type      NullTransactionStatus
	CreatedAt pgtype.Timestamptz
}

type User struct {
	ID        int32
	Email     pgtype.Text
	Password  pgtype.Text
	CreatedAt pgtype.Timestamptz
}
